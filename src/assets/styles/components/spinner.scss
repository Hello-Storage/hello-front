$colors: 
	#489D8A
	#324650
	#D34B4C
	#E8A961;
$size: 2em; /*change this to resize*/

@function scale($i){
	@return 1em * $i;
}

.spinner{
	list-style: none;
	margin: 0;
	padding: 0;
	position: relative;
	width: 5em;
	width: scale(5);
	li{
		position: absolute;
		left: 0;
		right: 0;
		bottom: 0;
		top: 0;
		margin: auto;
		border-radius: 50%;
		box-sizing: border-box;
		display: flex;
		justify-content: center;
		align-items: center;
		transform-origin: center center;
		animation: anim 1s ease-in-out infinite;
		will-change: transform, filter;
		&:nth-child(1){
			width: scale(1);
			height: scale(1);
			&:after{
				content:'';
				display: block;
				font-size: 25%;
				width: 1em;
				height: 1em;
				border-radius: 50%;
				box-shadow: 
					scale(1) 0 0 rgba(nth($colors, 1), .2),
					-(scale(1)) 0 0 rgba(nth($colors, 2), .2),
					0 scale(1) 0 rgba(nth($colors, 3), .2),
					0 (-(scale(1))) 0 rgba(nth($colors, 4), .2);
			}
		}
		&:nth-child(2){
			animation-delay: .1s;
			width: scale(2);
			height: scale(2);
			&:after{
				content:'';
				display: block;
				font-size: 50%;
				width: 1em;
				height: 1em;
				border-radius: 50%;
				box-shadow: 
					scale(1.5) 0 0 rgba(nth($colors, 1), .4),
					-(scale(1.5)) 0 0 rgba(nth($colors, 2), .4),
					0 scale(1.5) 0 rgba(nth($colors, 3), .4),
					0 (-(scale(1.5))) 0 rgba(nth($colors, 4), .4); 
			}
		}
		&:nth-child(3){
			animation-delay: .15s;
			width: scale(3);
			height: scale(3);
			&:after{
				content:'';
				display: block;
				font-size: 75%;
				width: 1em;
				height: 1em;
				border-radius: 50%;
				box-shadow: 
					scale(2) 0 0 rgba(nth($colors, 1), .6),
					-(scale(2)) 0 0 rgba(nth($colors, 2), .6),
					0 scale(2) 0 rgba(nth($colors, 3), .6),
					0 (-(scale(2))) 0 rgba(nth($colors, 4), .6);
			}
		}
		&:nth-child(4){
			animation-delay: .2s;
			width: scale(4);
			height: scale(4);
			&:after{
				content:'';
				display: block;
				font-size: 100%;
				width: 1em;
				height: 1em;
				border-radius: 50%;
				box-shadow: 
					scale(2.5) 0 0 rgba(nth($colors, 1), .8),
					-(scale(2.5)) 0 0 rgba(nth($colors, 2), .8),
					0 scale(2.5) 0 rgba(nth($colors, 3), .8),
					0 (-(scale(2.5))) 0 rgba(nth($colors, 4), .8);
			}
		}
		&:nth-child(5){
			animation-delay: .25s;
			width: scale(5);
			height: scale(5);
			&:after{
				content:'';
				display: block;
				font-size: 125%;
				width: 1em;
				height: 1em;
				border-radius: 50%;
				box-shadow: 
					scale(3) 0 0 nth($colors, 1),
					-(scale(3)) 0 0 nth($colors, 2),
					0 scale(3) 0 nth($colors, 3),
					0 (-(scale(3))) 0 nth($colors, 4);
			}
		}
	}
}
@keyframes anim {
	50%{
		filter: blur(2px);
	}
	90%, 100%{ 
		transform: rotate(1turn);
		filter: blur(0);
	}
}


$blockSize: 2em;
//$blockSize: 6vmin; // Try this in Firefox! Viewport based size, which doesn't work in Canary at the moment

// Play with these to see what you get
$delay: .065s;
$duration: .88s;
$startingColor: #5a5a5a;
$endingColor: #292929;

// Calculate some values
$blockMargin: calc($blockSize / 3);
$loaderSize: $blockSize * 3 + $blockMargin * 2;

@mixin animation-delay( $delay ) {
  -webkit-animation-delay: $delay;
  animation-delay: $delay;
}

@mixin translate( $x, $y ) {
    transform: translate($x, $y);
  }

// Official syntax supported by IE10, FF16, Opera 12.1,
// so we're only going to add the webkit prefix
@mixin animation( $ani1:null, $ani2:null ) {
  @if ($ani2 != null) {
    -webkit-animation: $ani1, $ani2;
    animation: $ani1, $ani2;
  }
  
  @else if ($ani1 != null) {
    -webkit-animation: $ani1;
    animation: $ani1;
  }
}


.loader {
  position: absolute;
  top: 50%;
  left: 50%;
//   width: $loaderSize;
//   height: $loaderSize;
//   margin-left: -$loaderSize/2;
//   margin-top: -$loaderSize/2;
}

.loader-block {
  position: absolute;
  top: 0;
  left: 0;
  display: inline-block;
  opacity: 0;
  width: $blockSize;
  height: $blockSize;
  background: $startingColor;
  @include animation(show $duration step-end infinite alternate,
    pulse $duration linear infinite alternate);
}



// Second
.loader-block:nth-child(1) {
  @include translate(0, 0);
  @include animation-delay(1 * $delay);
}

// Ninth
.loader-block:nth-child(2) {
  @include translate($blockSize + $blockMargin, 0);
  @include animation-delay(2 * $delay);
}

// Fourth
.loader-block:nth-child(3) {
  @include translate(($blockSize * 2) + ($blockMargin * 2), 0);
  @include animation-delay(3 * $delay);
}

// Sixth
.loader-block:nth-child(4) {
  @include translate(0, $blockSize + $blockMargin);
  @include animation-delay(5 * $delay);
}

// Third
.loader-block:nth-child(5) {
  @include translate($blockSize + $blockMargin, $blockSize + $blockMargin);
  @include animation-delay(2 * $delay);
}

// Eighth
.loader-block:nth-child(6) {
  @include translate(($blockSize * 2) + ($blockMargin * 2), $blockSize + $blockMargin);
  @include animation-delay(7 * $delay);
}

// Seventh
.loader-block:nth-child(7) {
  @include translate(0, ($blockSize * 2) + ($blockMargin * 2));
  @include animation-delay(6 * $delay);
}

// Fifth
.loader-block:nth-child(8) {
  @include translate($blockSize + $blockMargin, ($blockSize * 2) + ($blockMargin * 2));
  @include animation-delay(4 * $delay);
}

// First
.loader-block:nth-child(9) {
  @include translate(($blockSize * 2) + ($blockMargin * 2), ($blockSize * 2) + ($blockMargin * 2));
}


@-webkit-keyframes pulse {
  from,
  40% { 
    background: $startingColor;
  }
  to {
    background: $endingColor;
  }
}

@-webkit-keyframes show {
  from, 40% { opacity: 0; }
  41%, to { opacity: 1; }
}

@keyframes pulse {
  from,
  40% { 
    background: $startingColor;
  }
  to {
    background: $endingColor;
  }
}

@keyframes show {
  from, 40% { opacity: 0; }
  41%, to { opacity: 1; }
}
